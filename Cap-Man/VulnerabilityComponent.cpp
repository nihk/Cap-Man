#include "VulnerabilityComponent.h"

const float VulnerabilityComponent::VULNERABLE_DURATION_EXPIRED = -1.0f;

VulnerabilityComponent::VulnerabilityComponent() 
    : mIsVulnerable(false)
    , mIsTiming(false)
    , mAccumulatedTime(0.0f)
    , mVulnerableDuration(VULNERABLE_DURATION_EXPIRED) {
}

VulnerabilityComponent::~VulnerabilityComponent() {
}

void VulnerabilityComponent::makeTemporarilyVulnerable(float howLong) {
    mIsTiming = true;
    mIsVulnerable = true;

    mVulnerableDuration = howLong;
    mAccumulatedTime = 0.0f;
    
    // Uncomment if I want cumulative vulnerability durations
    //if (mVulnerableDuration != VULNERABLE_DURATION_EXPIRED) {
    //  mVulnerableDuration += howLong;
    //} else {
    //  mVulnerableDuration = howLong;
    //}
}

void VulnerabilityComponent::reset() {
    mIsTiming = false;
    mIsVulnerable = false;
    mAccumulatedTime = 0.0f;
    mVulnerableDuration = VULNERABLE_DURATION_EXPIRED;
}

void VulnerabilityComponent::update(float delta) {
    if (mIsTiming) {
        mAccumulatedTime += delta * 1000.0f;
        if (mAccumulatedTime >= mVulnerableDuration) {
            reset();
        }
    }
}

float VulnerabilityComponent::timeRemainingVulnerable() const {
    if (mIsVulnerable) {
        return mVulnerableDuration - mAccumulatedTime;
    }

    return -1.0f;
}
